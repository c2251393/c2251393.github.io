// Generated by CoffeeScript 1.8.0
(function() {
  var modInv, mul, myPow;

  mul = function(x, y, mod) {
    var base, res, tmp;
    res = 0;
    base = x;
    tmp = y;
    while (tmp > 0) {
      if (tmp % 2 === 0) {
        tmp /= 2;
      } else {
        res = (res + base) % mod;
        tmp = (tmp - 1) / 2;
      }
      base = (base + base) % mod;
    }
    return res;
  };

  myPow = function(x, n, mod) {
    var res, tmp;
    if (n === 0) {
      return 1 % mod;
    }
    res = 0;
    if (n % 2 === 0) {
      res = myPow(x, n / 2, mod);
    } else {
      res = myPow(x, (n - 1) / 2, mod);
    }
    tmp = mul(res, res, mod);
    if (n % 2 === 0) {
      return tmp;
    } else {
      return mul(tmp, x, mod);
    }
  };

  modInv = function(e) {
    var inv, mod, txt1, txt2, x;
    e.preventDefault();
    txt1 = $('#x').val();
    txt2 = $('#MOD').val();
    x = parseInt(txt1);
    mod = parseInt(txt2);
    inv = myPow(x, mod - 2, mod);
    console.log(inv.toString());
    $('#modInvRes').html('\\( ' + x.toString() + '^{-1} \\equiv' + inv.toString() + '\\mod{' + mod.toString() + '}' + ' \\)');
    return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
  };

  $(document).ready((function() {
    $('#infLbd').click(function() {
      return alert('cofJIZZZZZZZfee');
    });
    $('#aboutMeH').click(function() {
      return $('#about').fadeToggle(500);
    });
    $('#invFormx').submit(modInv);
    $('#invFormMOD').submit(modInv);
    return $('#invBut').click(modInv);
  }));

}).call(this);
